###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         28/May/2019  10:38:03 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\Source\SampleApp.c    #
#    Command line       =  -f E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ± #
#                          ¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ            #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ± #
#                          ¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO          #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\BaiduNetdiskDownload\CC2 #
#                          530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ· #
#                          çÉÈ\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\Source\SampleApp.c -D ZTOOL_P1 -D xMT_TASK -D    #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -lC                   #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\CoordinatorE #
#                          B\List\ -lA E:\BaiduNetdiskDownload\CC2530-2018\Á÷ #
#                          ³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack- #
#                          2.5.1a\Projects\zstack\Samples\SampleApp\CC2530DB\ #
#                          CoordinatorEB\List\ --diag_suppress Pe001,Pa010    #
#                          -o E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ± #
#                          ¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\Coordinat #
#                          orEB\Obj\ -e --no_code_motion --debug              #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\BaiduNetdiskDownload\CC #
#                          2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ #
#                          ·çÉÈ\ZStack-2.5.1a\Projects\zstack\Samples\SampleA #
#                          pp\CC2530DB\ -I E:\BaiduNetdiskDownload\CC2530-201 #
#                          8\Á÷³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZSt #
#                          ack-2.5.1a\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\Source\ -I E:\BaiduNetdiskDownload\CC2530-2 #
#                          018\Á÷³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\Z #
#                          Stack-2.5.1a\Projects\zstack\Samples\SampleApp\CC2 #
#                          530DB\..\..\..\ZMain\TI2530DB\ -I                  #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\hal\include\ -I                      #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\hal\target\CC2530EB\ -I              #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\include\ -I                      #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\high_level\ -I                   #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\low_level\srf04\ -I              #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\mac\low_level\srf04\single_chip\ -I  #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\mt\ -I E:\BaiduNetdiskDownload\CC253 #
#                          0-2018\Á÷³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉ #
#                          È\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\osal\include\   #
#                          -I E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ± #
#                          ¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\Components\services\saddr\ -I                #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\services\sdata\ -I                   #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\af\ -I                         #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\nwk\ -I                        #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\sapi\ -I                       #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\sec\ -I                        #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\sys\ -I                        #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\stack\zdo\ -I                        #
#                          E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ #
#                          ..\Components\zmac\ -I E:\BaiduNetdiskDownload\CC2 #
#                          530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ· #
#                          çÉÈ\ZStack-2.5.1a\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\..\..\..\..\..\Components\zmac\f8w\     #
#                          -Ohz --require_prototypes                          #
#    List file          =  E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\CoordinatorE #
#                          B\List\SampleApp.lst                               #
#    Object file        =  E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º #
#                          11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Proje #
#                          cts\zstack\Samples\SampleApp\CC2530DB\CoordinatorE #
#                          B\Obj\SampleApp.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

E:\BaiduNetdiskDownload\CC2530-2018\Á÷³Ì×¢ÊÍ°æ±¾£º11.°´¼üÎÞÏß¿ª¹Ø¼ÌµçÆ÷-Ì¨µÆ·çÉÈ\ZStack-2.5.1a\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2          Filename:       SampleApp.c
      3          Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4          Revision:       $Revision: 19453 $
      5          
      6          Description:    Sample Application (no Profile).
      7          
      8          
      9          Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11          IMPORTANT: Your use of this Software is limited to those specific rights
     12          granted under the terms of a software license agreement between the user
     13          who downloaded the software, his/her employer (which must be your employer)
     14          and Texas Instruments Incorporated (the "License").  You may not use this
     15          Software unless you agree to abide by the terms of the License. The License
     16          limits your use, and you acknowledge, that the Software may not be modified,
     17          copied or distributed unless embedded on a Texas Instruments microcontroller
     18          or used solely and exclusively in conjunction with a Texas Instruments radio
     19          frequency transceiver, which is integrated into your product.  Other than for
     20          the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21          works of, modify, distribute, perform, display or sell this Software and/or
     22          its documentation for any purpose.
     23          
     24          YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25          PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26          INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27          NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28          TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29          NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30          LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31          INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32          OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33          OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34          (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36          Should you have any questions regarding your right to use this Software,
     37          contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41          This application isn't intended to do anything useful, it is
     42          intended to be a simple example of an application's structure.
     43          
     44          This application sends it's messages either as broadcast or
     45          broadcast filtered group messages.  The other (more normal)
     46          message addressing is unicast.  Most of the other sample
     47          applications are written to support the unicast message model.
     48          
     49          Key control:
     50          SW1:  Sends a flash command to all devices in Group 1.
     51          SW2:  Adds/Removes (toggles) this device in and out
     52          of Group 1.  This will enable and disable the
     53          reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57          * INCLUDES
     58          */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDObject.h"
     64          #include "ZDProfile.h"
     65          #include "ZDApp.h"
     66          
     67          #include "SampleApp.h"
     68          #include "SampleAppHw.h"
     69          
     70          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     71          
     72          /* HAL */
     73          #include "hal_lcd.h"
     74          #include "hal_led.h"
     75          #include "hal_key.h"
     76          
     77          #include "MT_UART.h"
     78          #include "MT_APP.h"
     79          #include "MT.h"
     80          
     81          /*********************************************************************
     82          * MACROS
     83          */
     84          #define DATA_PIN P0_5            //¶¨ÒåP0.5¿ÚÎª¼ÌµçÆ÷µÄ¿ØÖÆ¶Ë
     85          
     86          // When the Rx buf space is less than this threshold, invoke the Rx callback.
     87          #if !defined( SAMPLEAPP_APP_THRESH )
     88          #define SAMPLE_APP_THRESH  64
     89          #endif
     90          
     91          #if !defined( SAMPLEAPP_APP_RX_SZ )
     92          #define SAMPLE_APP_RX_SZ  128
     93          #endif
     94          
     95          #if !defined( SAMPLEAPP_APP_TX_SZ )
     96          #define SAMPLE_APP_TX_SZ  128
     97          #endif
     98          
     99          // Millisecs of idle time after a byte is received before invoking Rx callback.
    100          #if !defined( SERIAL_APP_IDLE )
    101          #define SAMPLE_APP_IDLE  6
    102          #endif
    103          
    104          // This is the max byte count per OTA message.
    105          #if !defined( SAMPLE_APP_TX_MAX )
    106          #define SAMPLE_APP_TX_MAX  10
    107          #endif
    108          
    109          
    110          #define UART0        0x00
    111          
    112          /*********************************************************************
    113          * CONSTANTS
    114          */
    115          
    116          /*********************************************************************
    117          * TYPEDEFS
    118          */
    119          
    120          /*********************************************************************
    121          * GLOBAL VARIABLES
    122          */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    123          uint8 AppTitle[] = "ALD relay&LED"; //Ó¦ÓÃ³ÌÐòÃû³Æ
   \                     AppTitle:
   \   000000                DS 14
   \   00000E                REQUIRE `?<Initializer for AppTitle>`
   \   00000E                REQUIRE __INIT_XDATA_I
    124          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    125          uint8 LedState = 0x30;
   \                     LedState:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for LedState>`
   \   000001                REQUIRE __INIT_XDATA_I
    126          
    127          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    128          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
   \   000006   0000         DW 0
    129          {
    130            SAMPLEAPP_PERIODIC_CLUSTERID,
    131            SAMPLEAPP_FLASH_CLUSTERID
    132          };
    133          

   \                                 In  segment XDATA_ROM_C, align 1
    134          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW SampleApp_ClusterList
    135          {
    136            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    137            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    138            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    139            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    140            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    141            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    142            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    143            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    144            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    145          };
    146          
    147          // This is the Endpoint/Interface description.  It is defined here, but
    148          // filled-in in SampleApp_Init().  Another way to go would be to fill
    149          // in the structure here and make it a "const" (in code space).  The
    150          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          afAddrType_t EndPoint_DstAddr;
   \                     EndPoint_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    154          
    155          /*********************************************************************
    156          * EXTERNAL VARIABLES
    157          */
    158          
    159          /*********************************************************************
    160          * EXTERNAL FUNCTIONS
    161          */
    162          
    163          /*********************************************************************
    164          * LOCAL VARIABLES
    165          */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    167          // This variable will be received when
    168          // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    169          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    170          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    171          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    172          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          afAddrType_t SampleApp_Periodic_DstAddr; // ÓÃÓÚÐ­µ÷Æ÷¹ã²¥ÏûÏ¢
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          afAddrType_t SampleApp_TxAddr; // ÓÃÓÚÖÕ¶ËÉè±¸ÏòÐ­µ÷Æ÷±¨¸æ¶ÌµØÖ·ÐÅÏ¢
   \                     SampleApp_TxAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    175          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    179          /*********************************************************************
    180          * LOCAL FUNCTIONS
    181          */
    182          void SampleApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    183          void AfSendAddrInfo(void);
    184          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    185          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    186          void SampleApp_SendPeriodicMessage( void );
    187          void SampleApp_SendHeartBeatMessage(void);
    188          /*********************************************************************
    189          * NETWORK LAYER CALLBACKS
    190          */
    191          
    192          /*********************************************************************
    193          * PUBLIC FUNCTIONS
    194          */
    195          
    196          /*********************************************************************
    197          * @fn      SampleApp_Init
    198          *
    199          * @brief   Initialization function for the Generic App Task.
    200          *          This is called during initialization and should contain
    201          *          any application specific initialization (ie. hardware
    202          *          initialization/setup, table initialization, power up
    203          *          notificaiton ... ).
    204          *
    205          * @param   task_id - the ID assigned by OSAL.  This ID should be
    206          *                    used to send messages and set timers.
    207          *
    208          * @return  none
    209          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    210          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    211          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    212            halUARTCfg_t uartConfig;
    213            
    214            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    215            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    216            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    217            
    218            P0SEL &= ~0x20;               //ÉèÖÃP0.5¿ÚÎªÆÕÍ¨IO
   \   000016   53F3DF       ANL     0xf3,#0xdf
    219            P0DIR |= 0x20;                //ÉèÖÃP0.5¿ÚÎªÊä³ö
   \   000019   43FD20       ORL     0xfd,#0x20
    220            DATA_PIN = 0;                 //¼ÌµçÆ÷Ä¬ÈÏ¶Ï¿ª ¼ÌµçÆ÷Ä¬ÈÏÊÇ¸ßµçÆ½´¥·¢¿É×ÔÐÐÇÐ»»
   \   00001C   C285         CLR     0x80.5
    221            
    222            // Device hardware initialization can be added here or in main() (Zmain.c).
    223            // If the hardware is application specific - add it here.
    224            // If the hardware is other parts of the device add it in main().
    225            
    226          #if defined ( BUILD_ALL_DEVICES )
    227            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    228            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    229            // together - if they are - we will start up a coordinator. Otherwise,
    230            // the device will start as a router.
    231            if ( readCoordinatorJumper() )
    232              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    233            else
    234              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    235          #endif // BUILD_ALL_DEVICES
    236            
    237          #if defined ( HOLD_AUTO_START )
    238            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    239            //  from starting the device and wait for the application to
    240            //  start the device.
    241            ZDOInitDevice(0);
    242          #endif
    243            
    244            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00001E   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000021   F0           MOVX    @DPTR,A
    245            GenericApp_DstAddr.endPoint = 0;
   \   000022   A3           INC     DPTR
   \   000023   F0           MOVX    @DPTR,A
    246            GenericApp_DstAddr.addr.shortAddr = 0;
   \   000024   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   F0           MOVX    @DPTR,A
    247            
    248            // Setup for the periodic message's destination address
    249            // Broadcast to everyone
    250            // Ð­µ÷Æ÷¹ã²¥·¢ËÍÊý¾Ýµ½ÖÕ¶Ë
    251            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002A   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002D   740F         MOV     A,#0xf
   \   00002F   F0           MOVX    @DPTR,A
    252            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000030   A3           INC     DPTR
   \   000031   7414         MOV     A,#0x14
   \   000033   F0           MOVX    @DPTR,A
    253            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF; // ¹ã²¥µØÖ·
   \   000034   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000037   74FF         MOV     A,#-0x1
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    254            
    255            // ÖÕ¶Ëµ¥²¥·¢ËÍÊý¾Ýµ½Ð­µ÷Æ÷
    256            SampleApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00003C   90....       MOV     DPTR,#SampleApp_TxAddr + 8
   \   00003F   7402         MOV     A,#0x2
   \   000041   F0           MOVX    @DPTR,A
    257            SampleApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000042   A3           INC     DPTR
   \   000043   7414         MOV     A,#0x14
   \   000045   F0           MOVX    @DPTR,A
    258            SampleApp_TxAddr.addr.shortAddr = 0x00; // µ¥²¥Ð­µ÷Æ÷µØÖ·
   \   000046   90....       MOV     DPTR,#SampleApp_TxAddr
   \   000049   E4           CLR     A
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   F0           MOVX    @DPTR,A
    259            
    260            // Ð­µ÷Æ÷µ¥²¥·¢ËÍµ½Ö¸¶¨µØÖ·µÄÖÕ¶ËÉÏ  
    261            EndPoint_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00004D   90....       MOV     DPTR,#EndPoint_DstAddr + 8
   \   000050   7402         MOV     A,#0x2
   \   000052   F0           MOVX    @DPTR,A
    262            EndPoint_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000053   A3           INC     DPTR
   \   000054   7414         MOV     A,#0x14
   \   000056   F0           MOVX    @DPTR,A
    263            EndPoint_DstAddr.addr.shortAddr = 0x00; // ÔÚ·¢ËÍµÄÊ±ºòÐÞ¸ÄÖÕ¶ËµØÖ·
   \   000057   90....       MOV     DPTR,#EndPoint_DstAddr
   \   00005A   E4           CLR     A
   \   00005B   F0           MOVX    @DPTR,A
   \   00005C   A3           INC     DPTR
   \   00005D   F0           MOVX    @DPTR,A
    264              
    265            
    266            // Fill out the endpoint description.
    267            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT; // ¶ËµãºÅ
   \   00005E   90....       MOV     DPTR,#SampleApp_epDesc
   \   000061   7414         MOV     A,#0x14
   \   000063   F0           MOVX    @DPTR,A
    268            SampleApp_epDesc.task_id = &SampleApp_TaskID; // ¶Ëµã¶ÔÓ¦µÄÈÎÎñ
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006B   F0           MOVX    @DPTR,A
    269            SampleApp_epDesc.simpleDesc = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc; // ¼òµ¥ÃèÊö·û
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006F   F0           MOVX    @DPTR,A
   \   000070   A3           INC     DPTR
   \   000071   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000073   F0           MOVX    @DPTR,A
    270            SampleApp_epDesc.latencyReq = noLatencyReqs;  
   \   000074   A3           INC     DPTR
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
    271            afRegister( &SampleApp_epDesc ); // ×¢²áÒ»¸öÓ¦ÓÃµÄ¶ËµãÃèÊö·û£¬×¢²áÒ»¸öÐÂµÄ¶Ëµãµ½ÈÎÎñ£¬ÕâÑùµ±ÓÐÐÂµÄÏûÏ¢µ½À´Ê±Ö±½Ó·¢ËÍµ½Ö¸¶¨µÄÈÎÎñÖÐ
   \   000077                ; Setup parameters for call to function afRegister
   \   000077   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000079   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007B   12....       LCALL   ??afRegister?relay
    272            
    273            // °ó¶¨°´¼üÊÂ¼þµ½ÈÎÎñID
    274            RegisterForKeys( SampleApp_TaskID );
   \   00007E                ; Setup parameters for call to function RegisterForKeys
   \   00007E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??RegisterForKeys?relay
    275            // ½«µ×²ãµÄÒ»Ð©ÊÂ¼þÏûÏ¢ÒýÈëµ½Ó¦ÓÃ²ãµÄ×¢²á·½·¨£¬×Ô¶¨ÒåÇø½âÎöÒ»Ð©ÏûÏ¢
    276            ZDO_RegisterForZDOMsg( SampleApp_TaskID, End_Device_Bind_rsp );
   \   000086                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000086   7A20         MOV     R2,#0x20
   \   000088   7B80         MOV     R3,#-0x80
   \   00008A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    277            ZDO_RegisterForZDOMsg( SampleApp_TaskID, Match_Desc_rsp );
   \   000092                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000092   7A06         MOV     R2,#0x6
   \   000094   7B80         MOV     R3,#-0x80
   \   000096   90....       MOV     DPTR,#SampleApp_TaskID
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F9           MOV     R1,A
   \   00009B   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    278            
    279            // By default, all devices start out in Group 1
    280            SampleApp_Group.ID = 0x0001;
   \   00009E   90....       MOV     DPTR,#SampleApp_Group
   \   0000A1   7401         MOV     A,#0x1
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4   A3           INC     DPTR
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
    281            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   0000A7                ; Setup parameters for call to function osal_memcpy
   \   0000A7   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000AA   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000AD   F5..         MOV     ?V0 + 2,A
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B4   7C07         MOV     R4,#0x7
   \   0000B6   7D00         MOV     R5,#0x0
   \   0000B8   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000BA   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000BC   12....       LCALL   ??osal_memcpy?relay
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
    282            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000C4                ; Setup parameters for call to function aps_AddGroup
   \   0000C4   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000C6   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000C8   7914         MOV     R1,#0x14
   \   0000CA   12....       LCALL   ??aps_AddGroup?relay
    283            
    284            // ³õÊ¼»¯´®¿Ú
    285            MT_UartInit();                    //´®¿Ú³õÊ¼»¯
   \   0000CD                ; Setup parameters for call to function MT_UartInit
   \   0000CD   12....       LCALL   ??MT_UartInit?relay
    286            MT_UartRegisterTaskID(task_id);   //×¢²á´®¿ÚÈÎÎñ
   \   0000D0                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   0000D0   EE           MOV     A,R6
   \   0000D1   F9           MOV     R1,A
   \   0000D2   12....       LCALL   ??MT_UartRegisterTaskID?relay
    287            HalUARTWrite(0,"UartInit OK\n", sizeof("UartInit OK\n"));
   \   0000D5                ; Setup parameters for call to function HalUARTWrite
   \   0000D5   7C0D         MOV     R4,#0xd
   \   0000D7   7D00         MOV     R5,#0x0
   \   0000D9   7A..         MOV     R2,#`?<Constant "UartInit OK\\n">` & 0xff
   \   0000DB   7B..         MOV     R3,#(`?<Constant "UartInit OK\\n">` >> 8) & 0xff
   \   0000DD   7900         MOV     R1,#0x0
   \   0000DF   12....       LCALL   ??HalUARTWrite?relay
    288          }
   \   0000E2                REQUIRE ?Subroutine0
   \   0000E2                REQUIRE P0SEL
   \   0000E2                REQUIRE P0DIR
   \   0000E2                REQUIRE _A_P0
   \   0000E2                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    289          
    290          /*********************************************************************
    291          * @fn      SampleApp_ProcessEvent
    292          *
    293          * @brief   Generic Application Task event processor.  This function
    294          *          is called to process all events for the task.  Events
    295          *          include timers, messages and any other user defined events.
    296          *          ÏµÍ³¸÷ÖÖÊÂ¼þµÄ´¦Àíº¯Êý
    297          *
    298          * @param   task_id  - The OSAL assigned task ID.
    299          * @param   events - events to process.  This is a bit map and can
    300          *                   contain more than one event.
    301          *
    302          * @return  none
    303          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    304          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    305          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    306            afIncomingMSGPacket_t *MSGpkt;
    307            afDataConfirm_t *afDataConfirm;
    308            byte sentEP;
    309            ZStatus_t sentStatus;
    310            byte sentTransID;       // This should match the value sent
    311            (void)task_id;  // Intentionally unreferenced parameter
    312            
    313            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    314            {
    315              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID ); // ½ÓÊÕÒ»¸öÓÃ»§×Ô¶¨ÒåÈÎÎñµÄÏûÏ¢
   \   000011                ; Setup parameters for call to function osal_msg_receive
   \   000011   8017         SJMP    ??SampleApp_ProcessEvent_1
    316              while ( MSGpkt )
    317              {      
    318                switch ( MSGpkt->hdr.event )
    319                {
    320                  // ÏµÍ³ÈÎÎñÊÂ¼þÀïÃæµÄZDOÏûÏ¢
    321                  case ZDO_CB_MSG:
    322                    myprintf("ZDO_CB_MSG\n");
    323                    SampleApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );   
    324                    break;
    325                    
    326                  // ÏµÍ³ÈÎÎñÊÂ¼þÀïÃæµÄ½ÓÊÕÊý¾ÝÈ·ÈÏÏûÏ¢
    327                  case AF_DATA_CONFIRM_CMD:
    328                    myprintf("AF_DATA_CONFIRM_CMD\n");
    329                    
    330                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    331                    sentEP = afDataConfirm->endpoint;
    332                    sentStatus = afDataConfirm->hdr.status;
    333                    sentTransID = afDataConfirm->transID;
    334                    (void)sentEP;
    335                    (void)sentTransID;
    336                    // Action taken when confirmation is received.
    337                    if ( sentStatus != ZSuccess )
    338                    {
    339                      myprintf("AF_DATA_CONFIRM_CMD failed\n");
    340                    }
    341                    break;
    342                  
    343                    // ½ÓÊÕµ½Ò»¸ö°´¼üÊÂ¼þ
    344                  case KEY_CHANGE:
    345                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    346                    break;
    347                    
    348                    // ÎÞÏßÍøÂçÊÕµ½Êý¾Ý
    349                  case AF_INCOMING_MSG_CMD:
    350                    myprintf("AF_INCOMING_MSG_CMD\n");
    351                    SampleApp_MessageMSGCB( MSGpkt );
    352                    break;
    353                    
    354                    // Éè±¸×éÍø»òÕßÈëÍø³É¹¦£¬¿ÉÒÔ·¢ËÍÒ»¸öÏûÏ¢£¬²¢¿ªÆôÒ»¸öÐÄÌøÊÂ¼þµÄ¶¨Ê±Æ÷
    355                  case ZDO_STATE_CHANGE:
    356                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status); // ÁíÍâMSGpkt->srcAddr.addr.shortAddr;¿ÉÓÃÓÚ»ñÈ¡ÖÕ¶Ë½ÚµãµÄÍøÂç¶ÌµØÖ·
    357                    myprintf("SampleApp_NwkState = %d\n", SampleApp_NwkState);
    358                    
    359                    if(SampleApp_NwkState == DEV_ZB_COORD) {
    360                      myprintf("COORD device started\n");
    361                    } else if(SampleApp_NwkState == DEV_ROUTER) {
    362                      myprintf("ROUTER device started\n");
    363                    } else if(SampleApp_NwkState == DEV_END_DEVICE) {
    364                      myprintf("END device started\n");
    365                    }
    366                    if ((SampleApp_NwkState == DEV_ZB_COORD) || (SampleApp_NwkState == DEV_ROUTER) || (SampleApp_NwkState == DEV_END_DEVICE)) { // ²»Í¬µÄÖÕ¶Ë¶¼¿ªÆô¶¨Ê±ÈÎÎñ£¬Ð­µ÷Æ÷Í¨¹ý´®¿ÚÉÏ´«ÐÄÌøÐÅÏ¢£¬ÖÕ¶ËÍ¨¹ýAFÎÞÏß·¢ËÍ°üº¬µ±Ç°½Úµã¶ÌµØÖ·µÄÐÄÌøÐÅÏ¢
    367                      // osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT, SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    368                    }
    369                    break;
    370                    
    371                  default:
    372                    myprintf("unknown pkg-event = 0x%x\n", MSGpkt->hdr.event);
   \                     ??SampleApp_ProcessEvent_2:
   \   000013                ; Setup parameters for call to function myprintf
   \   000013   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000016   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000019   7A..         MOV     R2,#`?<Constant "unknown pkg-event = 0...">` & 0xff
   \   00001B   7B..         MOV     R3,#(`?<Constant "unknown pkg-event = 0...">` >> 8) & 0xff
   \   00001D   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000020   12....       LCALL   ?DEALLOC_XSTACK8
    373                    break;
    374                }      
    375                // Release the memory
    376                osal_msg_deallocate( (uint8 *)MSGpkt );      
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_msg_deallocate
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \   000027   12....       LCALL   ??osal_msg_deallocate?relay
    377                // Next - if one is available
    378                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00002A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00002A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??osal_msg_receive?relay
   \   000032   8A..         MOV     ?V0 + 2,R2
   \   000034   8B..         MOV     ?V0 + 3,R3
   \   000036   AE..         MOV     R6,?V0 + 2
   \   000038   AF..         MOV     R7,?V0 + 3
   \   00003A   EE           MOV     A,R6
   \   00003B   4F           ORL     A,R7
   \   00003C   7003         JNZ     $+5
   \   00003E   02....       LJMP    ??SampleApp_ProcessEvent_4 & 0xFFFF
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   E0           MOVX    A,@DPTR
   \   000046   24E6         ADD     A,#-0x1a
   \   000048   6048         JZ      ??SampleApp_ProcessEvent_5
   \   00004A   245A         ADD     A,#0x5a
   \   00004C   6032         JZ      ??SampleApp_ProcessEvent_6
   \   00004E   24EF         ADD     A,#-0x11
   \   000050   604C         JZ      ??SampleApp_ProcessEvent_7
   \   000052   24FE         ADD     A,#-0x2
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_8
   \   000056   24D6         ADD     A,#-0x2a
   \   000058   600E         JZ      ??SampleApp_ProcessEvent_9
   \   00005A   80B7         SJMP    ??SampleApp_ProcessEvent_2
   \                     ??SampleApp_ProcessEvent_8:
   \   00005C                ; Setup parameters for call to function myprintf
   \   00005C   7A..         MOV     R2,#`?<Constant "ZDO_CB_MSG\\n">` & 0xff
   \   00005E   7B..         MOV     R3,#(`?<Constant "ZDO_CB_MSG\\n">` >> 8) & 0xff
   \   000060   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000063   12....       LCALL   ??SampleApp_ProcessZDOMsgs?relay
   \   000066   80BB         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_9:
   \   000068                ; Setup parameters for call to function myprintf
   \   000068   7A..         MOV     R2,#`?<Constant "AF_DATA_CONFIRM_CMD\\n">` & 0xff
   \   00006A   7B..         MOV     R3,#(`?<Constant "AF_DATA_CONFIRM_CMD\\n">` >> 8) & 0xff
   \   00006C   12....       LCALL   ??myprintf?relay
   \   00006F   8E82         MOV     DPL,R6
   \   000071   8F83         MOV     DPH,R7
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   60AC         JZ      ??SampleApp_ProcessEvent_3
   \   000077                ; Setup parameters for call to function myprintf
   \   000077   7A..         MOV     R2,#`?<Constant "AF_DATA_CONFIRM_CMD f...">` & 0xff
   \   000079   7B..         MOV     R3,#(`?<Constant "AF_DATA_CONFIRM_CMD f...">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_10:
   \   00007B   12....       LCALL   ??myprintf?relay
   \   00007E   80A3         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000080                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   E0           MOVX    A,@DPTR
   \   000084   FA           MOV     R2,A
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F9           MOV     R1,A
   \   00008D   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000090   8091         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000092                ; Setup parameters for call to function myprintf
   \   000092   7A..         MOV     R2,#`?<Constant "AF_INCOMING_MSG_CMD\\n">` & 0xff
   \   000094   7B..         MOV     R3,#(`?<Constant "AF_INCOMING_MSG_CMD\\n">` >> 8) & 0xff
   \   000096   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000099   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00009C   8085         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_7:
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   90....       MOV     DPTR,#SampleApp_NwkState
   \   0000A3   F0           MOVX    @DPTR,A
   \   0000A4                ; Setup parameters for call to function myprintf
   \   0000A4   F5..         MOV     ?V0 + 2,A
   \   0000A6   75..00       MOV     ?V0 + 3,#0x0
   \   0000A9   78..         MOV     R0,#?V0 + 2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   7A..         MOV     R2,#`?<Constant "SampleApp_NwkState = %d\\n">` & 0xff
   \   0000B0   7B..         MOV     R3,#(`?<Constant "SampleApp_NwkState = %d\\n">` >> 8) & 0xff
   \   0000B2   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000B5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B8   90....       MOV     DPTR,#SampleApp_NwkState
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   6409         XRL     A,#0x9
   \   0000BE   7006         JNZ     ??SampleApp_ProcessEvent_11
   \   0000C0                ; Setup parameters for call to function myprintf
   \   0000C0   7A..         MOV     R2,#`?<Constant "COORD device started\\n">` & 0xff
   \   0000C2   7B..         MOV     R3,#(`?<Constant "COORD device started\\n">` >> 8) & 0xff
   \   0000C4   80B5         SJMP    ??SampleApp_ProcessEvent_10
   \                     ??SampleApp_ProcessEvent_11:
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   6407         XRL     A,#0x7
   \   0000C9   7006         JNZ     ??SampleApp_ProcessEvent_12
   \   0000CB                ; Setup parameters for call to function myprintf
   \   0000CB   7A..         MOV     R2,#`?<Constant "ROUTER device started\\n">` & 0xff
   \   0000CD   7B..         MOV     R3,#(`?<Constant "ROUTER device started\\n">` >> 8) & 0xff
   \   0000CF   80AA         SJMP    ??SampleApp_ProcessEvent_10
   \                     ??SampleApp_ProcessEvent_12:
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   6406         XRL     A,#0x6
   \   0000D4   6003         JZ      $+5
   \   0000D6   02....       LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
   \   0000D9                ; Setup parameters for call to function myprintf
   \   0000D9   7A..         MOV     R2,#`?<Constant "END device started\\n">` & 0xff
   \   0000DB   7B..         MOV     R3,#(`?<Constant "END device started\\n">` >> 8) & 0xff
   \   0000DD   809C         SJMP    ??SampleApp_ProcessEvent_10
    379              }
    380              
    381              // return unprocessed events
    382              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   0000DF   AA..         MOV     R2,?V0 + 0
   \   0000E1   E5..         MOV     A,?V0 + 1
   \   0000E3   6480         XRL     A,#0x80
   \   0000E5   FB           MOV     R3,A
   \   0000E6   8025         SJMP    ??SampleApp_ProcessEvent_13
    383            }
    384            
    385            // ½ÓÊÕµ½Ò»¸ö¶¨Ê±Æ÷ÊÂ¼þ
    386            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   0000E8   EA           MOV     A,R2
   \   0000E9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000EB   501C         JNC     ??SampleApp_ProcessEvent_14
    387            {
    388              SampleApp_SendHeartBeatMessage(); // ÐÄÌø¹¦ÄÜº¯Êý
   \   0000ED                ; Setup parameters for call to function SampleApp_SendHeartBeatMessage
   \   0000ED   12....       LCALL   ??SampleApp_SendHeartBeatMessage?relay
    389              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT, SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT*3); // 3000msÔÙ´Î¿ªÆô¶¨Ê±Æ÷
   \   0000F0                ; Setup parameters for call to function osal_start_timerEx
   \   0000F0   7CB8         MOV     R4,#-0x48
   \   0000F2   7D0B         MOV     R5,#0xb
   \   0000F4   7A01         MOV     R2,#0x1
   \   0000F6   7B00         MOV     R3,#0x0
   \   0000F8   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   12....       LCALL   ??osal_start_timerEx?relay
    390              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT); // Çå³ý´ËÒÑ¾­´¦ÀíÊÂ¼þ±êÖ¾Î»
   \   000100   E5..         MOV     A,?V0 + 0
   \   000102   6401         XRL     A,#0x1
   \   000104   FA           MOV     R2,A
   \   000105   AB..         MOV     R3,?V0 + 1
   \   000107   8004         SJMP    ??SampleApp_ProcessEvent_13
    391            }
    392            
    393            // Discard unknown events
    394            return 0;
   \                     ??SampleApp_ProcessEvent_14:
   \   000109   7A00         MOV     R2,#0x0
   \   00010B   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_13:
   \   00010D                REQUIRE ?Subroutine1
   \   00010D                ; // Fall through to label ?Subroutine1
    395          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ??myprintf?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   75..00       MOV     ?V0 + 3,#0x0
   \   000006   78..         MOV     R0,#?V0 + 2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ??myprintf?relay
   \   000003                ; Setup parameters for call to function SampleApp_ProcessZDOMsgs
   \   000003                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000003                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000003   EE           MOV     A,R6
   \   000004   FA           MOV     R2,A
   \   000005   EF           MOV     A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
    396          
    397          /*********************************************************************
    398          * Event Generation Functions
    399          */
    400          /*********************************************************************
    401          * @fn      SampleApp_HandleKeys
    402          *
    403          * @brief   °´¼üÊÂ¼þ´¦Àíº¯Êý
    404          *
    405          * @param   shift - true if in shift/alt.
    406          * @param   keys - bit field for key events. Valid entries:
    407          *                 HAL_KEY_SW_2
    408          *                 HAL_KEY_SW_1
    409          *
    410          * @return  none
    411          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    412          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    413          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    414            (void)shift;  // Intentionally unreferenced parameter
    415          #if defined(ZDO_COORDINATOR)       //°´Ð­µ÷Æ÷S1²Å·¢Êý¾Ý  
    416            if ( keys & HAL_KEY_SW_6 ){ // °´¼üS1,ÒÔ¹ã²¥·½Ê½·¢Êý¾Ý    
   \   000006   A2E5         MOV     C,0xE0 /* A   */.5
   \   000008   500C         JNC     ??SampleApp_HandleKeys_0
    417              myprintf("S1\n");
   \   00000A                ; Setup parameters for call to function myprintf
   \   00000A   7A..         MOV     R2,#`?<Constant "S1\\n">` & 0xff
   \   00000C   7B..         MOV     R3,#(`?<Constant "S1\\n">` >> 8) & 0xff
   \   00000E   12....       LCALL   ??myprintf?relay
    418              SampleApp_SendPeriodicMessage();
   \   000011                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000011   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay
   \   000014   800B         SJMP    ??SampleApp_HandleKeys_1
    419            } else if(keys & HAL_KEY_SW_1) { // °´¼üS2
   \                     ??SampleApp_HandleKeys_0:
   \   000016   A2E0         MOV     C,0xE0 /* A   */.0
   \   000018   5007         JNC     ??SampleApp_HandleKeys_1
    420              myprintf("S2\n");
   \   00001A                ; Setup parameters for call to function myprintf
   \   00001A   7A..         MOV     R2,#`?<Constant "S2\\n">` & 0xff
   \   00001C   7B..         MOV     R3,#(`?<Constant "S2\\n">` >> 8) & 0xff
   \   00001E   12....       LCALL   ??myprintf?relay
    421            }
    422          #endif
    423          
    424          #ifndef ZDO_COORDINATOR
    425            if ( keys & HAL_KEY_SW_6 ){
    426              myprintf("S1\n");
    427            }else if ( keys & HAL_KEY_SW_1 ){ // °´¼üS2
    428              myprintf("S2\n");
    429              AfSendAddrInfo(); // Ö»ÓÃÔÚÂ·ÓÉºÍÖÕ¶ËÉè±¸ÉÏ£¬ÏòÐ­µ÷Æ÷ÉÏ´«×ÔÉíµØÖ·
    430            }
    431          #endif
    432          }
   \                     ??SampleApp_HandleKeys_1:
   \   000021   7F01         MOV     R7,#0x1
   \   000023   02....       LJMP    ?BANKED_LEAVE_XDATA
    433          
    434          /*********************************************************************
    435          * LOCAL FUNCTIONS
    436          */
    437          
    438          /*********************************************************************
    439          * @fn      SampleApp_MessageMSGCB
    440          *
    441          * @brief   Data message processor callback.  This function processes
    442          *          any incoming data - probably from other devices.  So, based
    443          *          on cluster ID, perform the intended action.
    444          *
    445          * @param   none
    446          *
    447          * @return  none
    448          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    449          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    450          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    451            uint8 data;
    452            
    453            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   6401         XRL     A,#0x1
   \   000014   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    454            {    
    455            case SAMPLEAPP_PERIODIC_CLUSTERID: // Ð­µ÷Æ÷ÔÚ·¢ËÍÊý¾ÝµÄÊ±ºòÖ¸¶¨µÄ´ËÏûÏ¢¶ÔÓ¦µÄÃüÁî×Ö£¬¼´±íÊ¾ÄÄÖÖÀàÐÍµÄ¿ØÖÆÃüÁî
    456          #ifdef ZDO_COORDINATOR //Ð­µ÷Æ÷½ÓÊÕµ½ÖÕ¶ËµÄÎÞÏßÊý¾Ý 
    457              // Ê¹ÓÃ´®¿Ú´òÓ¡ÖÕ¶ËÉÏ´«µÄµØÖ·
    458              data = (uint8)pkt->cmd.Data[0];
    459              if(data == 0x38) { // // ½ÓÊÕµ½ÖÕ¶ËÉÏ´«µÄ¶ÌµØÖ·ºÍIEEEµØÖ·
   \   00001D   EE           MOV     A,R6
   \   00001E   2422         ADD     A,#0x22
   \   000020   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000023   6438         XRL     A,#0x38
   \   000025   6003         JZ      $+5
   \   000027   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    460                int i = 0;
    461                myprintf("RX net addr = ");
   \   00002A                ; Setup parameters for call to function myprintf
   \   00002A   7A..         MOV     R2,#`?<Constant "RX net addr = ">` & 0xff
   \   00002C   7B..         MOV     R3,#(`?<Constant "RX net addr = ">` >> 8) & 0xff
   \   00002E   12....       LCALL   ??myprintf?relay
    462                myprintf("0x%x", pkt->cmd.Data[1]);
   \   000031   EE           MOV     A,R6
   \   000032   2422         ADD     A,#0x22
   \   000034   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000037   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   00003A   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7A..         MOV     R2,#`?<Constant "0x%x">` & 0xff
   \   000042   7B..         MOV     R3,#(`?<Constant "0x%x">` >> 8) & 0xff
   \   000044   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
    463                myprintf("%x", pkt->cmd.Data[2]);
   \   00004A                ; Setup parameters for call to function myprintf
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   F5..         MOV     ?V0 + 0,A
   \   000057   75..00       MOV     ?V0 + 1,#0x0
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7A..         MOV     R2,#`?<Constant "%x">` & 0xff
   \   000061   7B..         MOV     R3,#(`?<Constant "%x">` >> 8) & 0xff
   \   000063   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
    464                myprintf("; IEEE addr = ");
   \   000069                ; Setup parameters for call to function myprintf
   \   000069   7A..         MOV     R2,#`?<Constant "; IEEE addr = ">` & 0xff
   \   00006B   7B..         MOV     R3,#(`?<Constant "; IEEE addr = ">` >> 8) & 0xff
   \   00006D   12....       LCALL   ??myprintf?relay
    465                for(i = 3; i < pkt->cmd.DataLength; i++) {
   \   000070   75..03       MOV     ?V0 + 0,#0x3
   \   000073   8034         SJMP    ??SampleApp_MessageMSGCB_2
    466                  myprintf("0x%x,", pkt->cmd.Data[i]);
   \                     ??SampleApp_MessageMSGCB_3:
   \   000075                ; Setup parameters for call to function myprintf
   \   000075   EE           MOV     A,R6
   \   000076   2422         ADD     A,#0x22
   \   000078   F582         MOV     DPL,A
   \   00007A   EF           MOV     A,R7
   \   00007B   3400         ADDC    A,#0x0
   \   00007D   F583         MOV     DPH,A
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   25..         ADD     A,?V0 + 0
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   35..         ADDC    A,?V0 + 1
   \   000087   8882         MOV     DPL,R0
   \   000089   F583         MOV     DPH,A
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   F5..         MOV     ?V0 + 2,A
   \   00008E   78..         MOV     R0,#?V0 + 2
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   7A..         MOV     R2,#`?<Constant "0x%x,">` & 0xff
   \   000095   7B..         MOV     R3,#(`?<Constant "0x%x,">` >> 8) & 0xff
   \   000097   12....       LCALL   ?Subroutine6 & 0xFFFF
    467                }
   \                     ??CrossCallReturnLabel_10:
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009D   E5..         MOV     A,?V0 + 0
   \   00009F   2401         ADD     A,#0x1
   \   0000A1   F5..         MOV     ?V0 + 0,A
   \   0000A3   E5..         MOV     A,?V0 + 1
   \   0000A5   3400         ADDC    A,#0x0
   \   0000A7   F5..         MOV     ?V0 + 1,A
   \                     ??SampleApp_MessageMSGCB_2:
   \   0000A9   EE           MOV     A,R6
   \   0000AA   2420         ADD     A,#0x20
   \   0000AC   F582         MOV     DPL,A
   \   0000AE   EF           MOV     A,R7
   \   0000AF   3400         ADDC    A,#0x0
   \   0000B1   F583         MOV     DPH,A
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   F8           MOV     R0,A
   \   0000B5   A3           INC     DPTR
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   F9           MOV     R1,A
   \   0000B8   C3           CLR     C
   \   0000B9   E5..         MOV     A,?V0 + 0
   \   0000BB   98           SUBB    A,R0
   \   0000BC   E5..         MOV     A,?V0 + 1
   \   0000BE   99           SUBB    A,R1
   \   0000BF   40B4         JC      ??SampleApp_MessageMSGCB_3
    468                myprintf("\n");
   \   0000C1                ; Setup parameters for call to function myprintf
   \   0000C1   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   0000C3   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   0000C5   12....       LCALL   ??myprintf?relay
    469              }
    470          #else //Â·ÓÉÆ÷ºÍÖÕ¶Ë½ÓÊÕÊý¾Ý´¦Àí 
    471              data = (uint8)pkt->cmd.Data[0];
    472              //¼ÌµçÆ÷Ä¬ÈÏ¸ßµçÆ½´¥·¢ 1ÎüºÏ  0¶Ï¿ª
    473              if(data == 0x30) 
    474              {
    475                DATA_PIN = 0;        //¼ÌµçÆ÷¶Ï¿ª ¼ÌµçÆ÷Ä¬ÈÏÊÇ¸ßµçÆ½´¥·¢¿É×ÔÐÐÇÐ»»
    476                HalLedSet(HAL_LED_1, LED_ON);  
    477              } else if(data == 0x31) 
    478              {
    479                DATA_PIN = 1;        //¼ÌµçÆ÷ÎüºÏ
    480                HalLedSet(HAL_LED_1, LED_OFF); 
    481              } else if(data == 'K') {
    482                HalLedBlink(HAL_LED_2, 0, 50, 500);
    483              }
    484          #endif    
    485              break;
    486              
    487            default:
    488              break;
    489            }
    490          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000C8   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   88..         MOV     ?V0 + 0,R0
   \   000007   89..         MOV     ?V0 + 1,R1
   \   000009                ; Setup parameters for call to function myprintf
   \   000009                ; Setup parameters for call to function myprintf
   \   000009   8882         MOV     DPL,R0
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    491          
    492          /**
    493          * Ð­µ÷Æ÷ÏòÖÕ¶Ë·¢ËÍ¹ã²¥ÀàÐÍÏûÏ¢
    494          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    496          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    497            if(LedState == 0x30) {
   \   000005   90....       MOV     DPTR,#LedState
   \   000008   E0           MOVX    A,@DPTR
   \   000009   6430         XRL     A,#0x30
   \   00000B   7004         JNZ     ??SampleApp_SendPeriodicMessage_0
    498              LedState = 0x31;
   \   00000D   7431         MOV     A,#0x31
   \   00000F   8002         SJMP    ??SampleApp_SendPeriodicMessage_1
    499            } else {
    500              LedState = 0x30;
   \                     ??SampleApp_SendPeriodicMessage_0:
   \   000011   7430         MOV     A,#0x30
   \                     ??SampleApp_SendPeriodicMessage_1:
   \   000013   F0           MOVX    @DPTR,A
    501            }  
    502            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    503                                SAMPLEAPP_PERIODIC_CLUSTERID,
    504                                1,
    505                                &LedState,
    506                                &SampleApp_TransID,
    507                                AF_DISCV_ROUTE,
    508                                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000014                ; Setup parameters for call to function AF_DataRequest
   \   000014   75..1E       MOV     ?V0 + 0,#0x1e
   \   000017   78..         MOV     R0,#?V0 + 0
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00001F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75....       MOV     ?V0 + 0,#LedState & 0xff
   \   00002A   75....       MOV     ?V0 + 1,#(LedState >> 8) & 0xff
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   75..01       MOV     ?V0 + 0,#0x1
   \   000035   75..00       MOV     ?V0 + 1,#0x0
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7920         MOV     R1,#0x20
   \   000044   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000046   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000048   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00004A   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00004C   12....       LCALL   ??AF_DataRequest?relay
   \   00004F   7409         MOV     A,#0x9
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   E9           MOV     A,R1
   \   000055   7013         JNZ     ??SampleApp_SendPeriodicMessage_2
    509            {
    510              if(LedState == 0x31) {
   \   000057   90....       MOV     DPTR,#LedState
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   6431         XRL     A,#0x31
   \   00005D   7004         JNZ     ??SampleApp_SendPeriodicMessage_3
    511                HalLedSet(HAL_LED_1, LED_ON);  
   \   00005F                ; Setup parameters for call to function HalLedSet
   \   00005F   7A00         MOV     R2,#0x0
   \   000061   8002         SJMP    ??SampleApp_SendPeriodicMessage_4
    512              } else {
    513                HalLedSet(HAL_LED_1, LED_OFF); 
   \                     ??SampleApp_SendPeriodicMessage_3:
   \   000063                ; Setup parameters for call to function HalLedSet
   \   000063   7A01         MOV     R2,#0x1
   \                     ??SampleApp_SendPeriodicMessage_4:
   \   000065   7901         MOV     R1,#0x1
   \   000067   12....       LCALL   ??HalLedSet?relay
    514              }
    515            }
    516            else
    517            {
    518              // Error occurred in request to send.
    519            }
    520          }
   \                     ??SampleApp_SendPeriodicMessage_2:
   \   00006A                REQUIRE ?Subroutine2
   \   00006A                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          
    522          /**
    523            ÐÄÌø¹¦ÄÜº¯Êý
    524          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    525          void SampleApp_SendHeartBeatMessage(void) {
   \                     SampleApp_SendHeartBeatMessage:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    526          #ifdef ZDO_COORDINATOR // Èç¹ûÊÇÐ­µ÷Æ÷£¬Ê¹ÓÃ´®¿ÚÏòÊ÷Ý®ÅÉ·¢ËÍÐÄÌøÐÅÏ¢
    527            myprintf("#HB@\n");
   \   000004                ; Setup parameters for call to function myprintf
   \   000004   7A..         MOV     R2,#`?<Constant "#HB@\\n">` & 0xff
   \   000006   7B..         MOV     R3,#(`?<Constant "#HB@\\n">` >> 8) & 0xff
   \   000008   12....       LCALL   ??myprintf?relay
    528            HalLedBlink(HAL_LED_1, 1, 50, 500);
   \   00000B                ; Setup parameters for call to function HalLedBlink
   \   00000B   7CF4         MOV     R4,#-0xc
   \   00000D   7D01         MOV     R5,#0x1
   \   00000F   7B32         MOV     R3,#0x32
   \   000011   7A01         MOV     R2,#0x1
   \   000013   7901         MOV     R1,#0x1
   \   000015   12....       LCALL   ??HalLedBlink?relay
    529          #endif    
    530          #ifndef ZDO_COORDINATOR // Èç¹ûÊÇÖÕ¶Ë£¬Ê¹ÓÃAFÏòÐ­µ÷Æ÷·¢ËÍ°üº¬¶ÌµØÖ·µÄÐÄÌøÏûÏ¢
    531            AfSendAddrInfo();
    532            HalLedBlink(HAL_LED_1, 1, 50, 500);
    533          #endif
    534          }
   \   000018   D083         POP     DPH
   \   00001A   D082         POP     DPL
   \   00001C   02....       LJMP    ?BRET
    535          
    536          /**
    537            ·¢ËÍÖÕ¶ËµØÖ·ÐÅÏ¢µ½Ð­µ÷Æ÷
    538          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    539          void AfSendAddrInfo(void) {
   \                     AfSendAddrInfo:
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    540            uint16 shortAddr;
    541            uint8 strBuf[11] = {0};  
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001A   740B         MOV     A,#0xb
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    542            
    543            shortAddr = NLME_GetShortAddr();
   \   00001F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001F   12....       LCALL   ??NLME_GetShortAddr?relay
    544            strBuf[0] = 0x38;  // ·¢ËÍÊý¾ÝµÄ±êÊ¶£¬±ãÓÚÐ­µ÷Æ÷½âÎö
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   7438         MOV     A,#0x38
   \   00002A   F0           MOVX    @DPTR,A
    545            strBuf[1] = HI_UINT16(shortAddr); // ´æ·ÅµØÖ·µÄ¸ß8Î»
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   EB           MOV     A,R3
   \   000031   F0           MOVX    @DPTR,A
    546            strBuf[2] = LO_UINT16(shortAddr); // ´æ·ÅµÍ8Î»
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   EA           MOV     A,R2
   \   000038   F0           MOVX    @DPTR,A
    547            osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8); // »ñÈ¡IEEEµØÖ·    
   \   000039                ; Setup parameters for call to function osal_memcpy
   \   000039                ; Setup parameters for call to function NLME_GetExtAddr
   \   000039   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00003C   8A..         MOV     ?V0 + 0,R2
   \   00003E   8B..         MOV     ?V0 + 1,R3
   \   000040   75..00       MOV     ?V0 + 2,#0x0
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000048   7C08         MOV     R4,#0x8
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   7406         MOV     A,#0x6
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   AA82         MOV     R2,DPL
   \   000053   AB83         MOV     R3,DPH
   \   000055   12....       LCALL   ??osal_memcpy?relay
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?DEALLOC_XSTACK8
    548            if ( AF_DataRequest( &SampleApp_TxAddr,                  // ·¢ËÍµÄÄ¿µÄµØÖ·+¶ËµãµØÖ·+´«ËÍÄ£Ê½
    549                                (endPointDesc_t *)&SampleApp_epDesc, // Ô´ÖÕ¶ËµÄÃèÊö
    550                                SAMPLEAPP_PERIODIC_CLUSTERID,        // ±»profileÖ¸¶¨µÄÓÐÐ§µÄ¼¯ÈººÅ
    551                                11,                                  // ·¢ËÍÊý¾Ý³¤¶È
    552                                strBuf,                              // ·¢ËÍÊý¾Ý»º³åÇø
    553                                &SampleApp_TransID,                  // ÏûÏ¢·¢ËÍID
    554                                AF_DISCV_ROUTE,                      // ÓÐÐ§Î»ÑÚÂëµÄ·¢ËÍÑ¡Ïî
    555                                AF_DEFAULT_RADIUS ) != afStatus_SUCCESS ) // ´«ËÍÌøÊý£¬Í¨³£ÉèÖÃÎªAF_DEFAULT_RADIUS
   \   00005D                ; Setup parameters for call to function AF_DataRequest
   \   00005D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000068   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00006B   78..         MOV     R0,#?V0 + 0
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   8582..       MOV     ?V0 + 0,DPL
   \   000078   8583..       MOV     ?V0 + 1,DPH
   \   00007B   78..         MOV     R0,#?V0 + 0
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   75..0B       MOV     ?V0 + 0,#0xb
   \   000083   75..00       MOV     ?V0 + 1,#0x0
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   75..01       MOV     ?V0 + 0,#0x1
   \   00008E   78..         MOV     R0,#?V0 + 0
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000093   7920         MOV     R1,#0x20
   \   000095   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000097   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000099   7A..         MOV     R2,#SampleApp_TxAddr & 0xff
   \   00009B   7B..         MOV     R3,#(SampleApp_TxAddr >> 8) & 0xff
   \   00009D   12....       LCALL   ??AF_DataRequest?relay
   \   0000A0   7409         MOV     A,#0x9
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   E9           MOV     A,R1
   \   0000A6   6007         JZ      ??AfSendAddrInfo_0
    556            {
    557              myprintf("EP AfSendAddrInfo() failed\n");
   \   0000A8                ; Setup parameters for call to function myprintf
   \   0000A8   7A..         MOV     R2,#`?<Constant "EP AfSendAddrInfo() f...">` & 0xff
   \   0000AA   7B..         MOV     R3,#(`?<Constant "EP AfSendAddrInfo() f...">` >> 8) & 0xff
   \   0000AC   12....       LCALL   ??myprintf?relay
    558            }
    559          }
   \                     ??AfSendAddrInfo_0:
   \   0000AF   740B         MOV     A,#0xb
   \   0000B1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B4   02....       LJMP    ?Subroutine0 & 0xFFFF
    560          
    561          /*********************************************************************
    562           * @fn      SampleApp_ProcessZDOMsgs()
    563           *
    564           * @brief   Process response messages
    565           *
    566           * @param   none
    567           *
    568           * @return  none
    569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          void SampleApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     SampleApp_ProcessZDOMsgs:
    571          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    572            myprintf("inMsg->clusterID = 0x%x\n", inMsg->clusterID);
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   00000F   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000012   7A..         MOV     R2,#`?<Constant "inMsg->clusterID = 0x%x\\n">` & 0xff
   \   000014   7B..         MOV     R3,#(`?<Constant "inMsg->clusterID = 0x%x\\n">` >> 8) & 0xff
   \   000016   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000019   12....       LCALL   ?DEALLOC_XSTACK8
    573            ZDO_ActiveEndpointRsp_t *pRsp = NULL;
    574            
    575            switch ( inMsg->clusterID )
   \   00001C   85..82       MOV     DPL,?V0 + 0
   \   00001F   85..83       MOV     DPH,?V0 + 1
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 0,A
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 1,A
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for SampleApp_ProcessZDOMsgs>_0`:
   \   00002E   0000         DW        0
   \   000030   0200         DW        2
   \   000032   0680         DW        32774
   \   000034   ....         DW        ??SampleApp_ProcessZDOMsgs_0
   \   000036   2080         DW        32800
   \   000038   ....         DW        ??SampleApp_ProcessZDOMsgs_1
   \   00003A   ....         DW        ??SampleApp_ProcessZDOMsgs_2
    576            {
    577              case End_Device_Bind_rsp:
    578                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??SampleApp_ProcessZDOMsgs_1:
   \   00003C   EE           MOV     A,R6
   \   00003D   2413         ADD     A,#0x13
   \   00003F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000042   7009         JNZ     ??SampleApp_ProcessZDOMsgs_3
    579                {
    580                  myprintf("End_Device_Bind_rsp ok\n");
   \   000044                ; Setup parameters for call to function myprintf
   \   000044   7A..         MOV     R2,#`?<Constant "End_Device_Bind_rsp ok\\n">` & 0xff
   \   000046   7B..         MOV     R3,#(`?<Constant "End_Device_Bind_rsp ok\\n">` >> 8) & 0xff
   \                     ??SampleApp_ProcessZDOMsgs_4:
   \   000048   12....       LCALL   ??myprintf?relay
   \   00004B   8049         SJMP    ??SampleApp_ProcessZDOMsgs_2
    581                } else {
    582                  myprintf("End_Device_Bind_rsp failed\n");
   \                     ??SampleApp_ProcessZDOMsgs_3:
   \   00004D                ; Setup parameters for call to function myprintf
   \   00004D   7A..         MOV     R2,#`?<Constant "End_Device_Bind_rsp f...">` & 0xff
   \   00004F   7B..         MOV     R3,#(`?<Constant "End_Device_Bind_rsp f...">` >> 8) & 0xff
   \   000051   80F5         SJMP    ??SampleApp_ProcessZDOMsgs_4
    583                }
    584                break;
    585              case Match_Desc_rsp:
    586                myprintf("Match_Desc_rsp\n");
   \                     ??SampleApp_ProcessZDOMsgs_0:
   \   000053                ; Setup parameters for call to function myprintf
   \   000053   7A..         MOV     R2,#`?<Constant "Match_Desc_rsp\\n">` & 0xff
   \   000055   7B..         MOV     R3,#(`?<Constant "Match_Desc_rsp\\n">` >> 8) & 0xff
   \   000057   12....       LCALL   ?Subroutine7 & 0xFFFF
    587                pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??CrossCallReturnLabel_14:
   \   00005A   12....       LCALL   ??ZDO_ParseEPListRsp?relay
    588                if ( pRsp )
   \   00005D   EA           MOV     A,R2
   \   00005E   4B           ORL     A,R3
   \   00005F   6035         JZ      ??SampleApp_ProcessZDOMsgs_2
    589                {
    590                  if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   E0           MOVX    A,@DPTR
   \   000066   702B         JNZ     ??SampleApp_ProcessZDOMsgs_5
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   6025         JZ      ??SampleApp_ProcessZDOMsgs_5
    591                  {
    592                    GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00006E   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000071   7402         MOV     A,#0x2
   \   000073   F0           MOVX    @DPTR,A
    593                    GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   000074   8A82         MOV     DPL,R2
   \   000076   8B83         MOV     DPH,R3
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F8           MOV     R0,A
   \   00007B   A3           INC     DPTR
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   F9           MOV     R1,A
   \   00007E   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000081   E8           MOV     A,R0
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E9           MOV     A,R1
   \   000085   F0           MOVX    @DPTR,A
    594                    // Take the first endpoint, Can be changed to search through endpoints
    595                    GenericApp_DstAddr.endPoint = pRsp->epList[0];
   \   000086   8A82         MOV     DPL,R2
   \   000088   8B83         MOV     DPH,R3
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   000092   F0           MOVX    @DPTR,A
    596                    
    597                  }
    598                  osal_mem_free( pRsp );
   \                     ??SampleApp_ProcessZDOMsgs_5:
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   12....       LCALL   ??osal_mem_free?relay
    599                }
    600                break;
    601              default:
    602                break;
    603            }
    604          }
   \                     ??SampleApp_ProcessZDOMsgs_2:
   \   000096   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for AppTitle>`:
   \   000000   414C4420     DB "ALD relay&LED"
   \            72656C61
   \            79264C45
   \            4400    

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for LedState>`:
   \   000000   30           DB 48

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendHeartBeatMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendHeartBeatMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AfSendAddrInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AfSendAddrInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessZDOMsgs

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartInit OK\\n">`:
   \   000000   55617274     DB "UartInit OK\012"
   \            496E6974
   \            204F4B0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ZDO_CB_MSG\\n">`:
   \   000000   5A444F5F     DB "ZDO_CB_MSG\012"
   \            43425F4D
   \            53470A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AF_DATA_CONFIRM_CMD\\n">`:
   \   000000   41465F44     DB "AF_DATA_CONFIRM_CMD\012"
   \            4154415F
   \            434F4E46
   \            49524D5F
   \            434D440A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AF_DATA_CONFIRM_CMD f...">`:
   \   000000   41465F44     DB "AF_DATA_CONFIRM_CMD failed\012"
   \            4154415F
   \            434F4E46
   \            49524D5F
   \            434D4420
   \            6661696C
   \            65640A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AF_INCOMING_MSG_CMD\\n">`:
   \   000000   41465F49     DB "AF_INCOMING_MSG_CMD\012"
   \            4E434F4D
   \            494E475F
   \            4D53475F
   \            434D440A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp_NwkState = %d\\n">`:
   \   000000   53616D70     DB "SampleApp_NwkState = %d\012"
   \            6C654170
   \            705F4E77
   \            6B537461
   \            7465203D
   \            2025640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "COORD device started\\n">`:
   \   000000   434F4F52     DB "COORD device started\012"
   \            44206465
   \            76696365
   \            20737461
   \            72746564
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ROUTER device started\\n">`:
   \   000000   524F5554     DB "ROUTER device started\012"
   \            45522064
   \            65766963
   \            65207374
   \            61727465
   \            640A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "END device started\\n">`:
   \   000000   454E4420     DB "END device started\012"
   \            64657669
   \            63652073
   \            74617274
   \            65640A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "unknown pkg-event = 0...">`:
   \   000000   756E6B6E     DB "unknown pkg-event = 0x%x\012"
   \            6F776E20
   \            706B672D
   \            6576656E
   \            74203D20
   \            30782578
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "S1\\n">`:
   \   000000   53310A00     DB "S1\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "S2\\n">`:
   \   000000   53320A00     DB "S2\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "RX net addr = ">`:
   \   000000   5258206E     DB "RX net addr = "
   \            65742061
   \            64647220
   \            3D2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0x%x">`:
   \   000000   30782578     DB "0x%x"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%x">`:
   \   000000   257800       DB "%x"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "; IEEE addr = ">`:
   \   000000   3B204945     DB "; IEEE addr = "
   \            45452061
   \            64647220
   \            3D2000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0x%x,">`:
   \   000000   30782578     DB "0x%x,"
   \            2C00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#HB@\\n">`:
   \   000000   23484240     DB "#HB@\012"
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   0000         DB 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EP AfSendAddrInfo() f...">`:
   \   000000   45502041     DB "EP AfSendAddrInfo() failed\012"
   \            6653656E
   \            64416464
   \            72496E66
   \            6F282920
   \            6661696C
   \            65640A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "inMsg->clusterID = 0x%x\\n">`:
   \   000000   696E4D73     DB "inMsg->clusterID = 0x%x\012"
   \            672D3E63
   \            6C757374
   \            65724944
   \            203D2030
   \            7825780A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End_Device_Bind_rsp ok\\n">`:
   \   000000   456E645F     DB "End_Device_Bind_rsp ok\012"
   \            44657669
   \            63655F42
   \            696E645F
   \            72737020
   \            6F6B0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End_Device_Bind_rsp f...">`:
   \   000000   456E645F     DB "End_Device_Bind_rsp failed\012"
   \            44657669
   \            63655F42
   \            696E645F
   \            72737020
   \            6661696C
   \            65640A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match_Desc_rsp\\n">`:
   \   000000   4D617463     DB "Match_Desc_rsp\012"
   \            685F4465
   \            73635F72
   \            73700A00

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     AfSendAddrInfo                     2      0     31
       -> NLME_GetShortAddr             0      0     44
       -> NLME_GetExtAddr               0      0     44
       -> osal_memcpy                   0      0     50
       -> AF_DataRequest                0      0     62
       -> myprintf                      0      0     44
     SampleApp_HandleKeys               0      0     21
       -> myprintf                      0      0     18
       -> SampleApp_SendPeriodicMessage
                                        0      0     18
       -> myprintf                      0      0     18
     SampleApp_Init                     0      0     14
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> ZDO_RegisterForZDOMsg         0      0     22
       -> ZDO_RegisterForZDOMsg         0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> HalUARTWrite                  0      0     22
     SampleApp_MessageMSGCB             0      0     26
       -> myprintf                      0      0     24
       -> myprintf                      0      0     28
       -> myprintf                      0      0     28
       -> myprintf                      0      0     24
       -> myprintf                      0      0     28
       -> myprintf                      0      0     24
     SampleApp_ProcessEvent             0      0     14
       -> osal_msg_receive              0      0     24
       -> myprintf                      0      0     28
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> myprintf                      0      0     24
       -> SampleApp_ProcessZDOMsgs      0      0     24
       -> myprintf                      0      0     24
       -> myprintf                      0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> myprintf                      0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> myprintf                      0      0     28
       -> myprintf                      0      0     24
       -> myprintf                      0      0     24
       -> myprintf                      0      0     24
       -> SampleApp_SendHeartBeatMessage
                                        0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_ProcessZDOMsgs           0      0     24
       -> myprintf                      0      0     24
       -> myprintf                      0      0     20
       -> myprintf                      0      0     20
       -> myprintf                      0      0     20
       -> ZDO_ParseEPListRsp            0      0     20
       -> osal_mem_free                 0      0     20
     SampleApp_SendHeartBeatMessage     2      0     12
       -> myprintf                      4      0      0
       -> HalLedBlink                   4      0      0
     SampleApp_SendPeriodicMessage      0      0     28
       -> AF_DataRequest                0      0     38
       -> HalLedSet                     0      0     20
       -> HalLedSet                     0      0     20


   Segment part sizes:

     Function/Label                          Bytes
     --------------                          -----
     _A_P0                                      1
     P0SEL                                      1
     P0DIR                                      1
     AppTitle                                  14
     LedState                                   1
     SampleApp_ClusterList                      8
     SampleApp_SimpleDesc                      12
     SampleApp_epDesc                           6
     GenericApp_DstAddr                        12
     EndPoint_DstAddr                          12
     SampleApp_TaskID                           1
     SampleApp_NwkState                         1
     SampleApp_TransID                          1
     SampleApp_Periodic_DstAddr                12
     SampleApp_TxAddr                          12
     SampleApp_Group                           18
     SampleAppPeriodicCounter                   1
     SampleAppFlashCounter                      1
     SampleApp_Init                           226
     ?Subroutine0                               5
     SampleApp_ProcessEvent                   269
     ?Subroutine1                               5
     ?Subroutine6                               6
     ?Subroutine5                               9
     ?Subroutine7                               8
     SampleApp_HandleKeys                      38
     SampleApp_MessageMSGCB                   203
     ?Subroutine4                               5
     ?Subroutine8                              14
     ?Subroutine3                              12
     ?Subroutine9                               9
     SampleApp_SendPeriodicMessage            106
     ?Subroutine2                               5
     SampleApp_SendHeartBeatMessage            31
     AfSendAddrInfo                           183
     SampleApp_ProcessZDOMsgs                 153
     ?<Initializer for AppTitle>               14
     ?<Initializer for LedState>                1
     ??SampleApp_Init?relay                     6
     ??SampleApp_ProcessEvent?relay             6
     ??SampleApp_HandleKeys?relay               6
     ??SampleApp_MessageMSGCB?relay             6
     ??SampleApp_SendPeriodicMessage?relay      6
     ??SampleApp_SendHeartBeatMessage?relay     6
     ??AfSendAddrInfo?relay                     6
     ??SampleApp_ProcessZDOMsgs?relay           6
     ?<Constant "Group 1">                      8
     ?<Constant "UartInit OK\n">               13
     ?<Constant "ZDO_CB_MSG\n">                12
     ?<Constant "AF_DATA_CONFIRM_CMD\n">       21
     ?<Constant "AF_DATA_CONFIRM_CMD f...">    28
     ?<Constant "AF_INCOMING_MSG_CMD\n">       21
     ?<Constant "SampleApp_NwkState = %d\n">   25
     ?<Constant "COORD device started\n">      22
     ?<Constant "ROUTER device started\n">     23
     ?<Constant "END device started\n">        20
     ?<Constant "unknown pkg-event = 0...">    26
     ?<Constant "S1\n">                         4
     ?<Constant "S2\n">                         4
     ?<Constant "RX net addr = ">              15
     ?<Constant "0x%x">                         5
     ?<Constant "%x">                           3
     ?<Constant "; IEEE addr = ">              15
     ?<Constant "0x%x,">                        6
     ?<Constant "\n">                           2
     ?<Constant "#HB@\n">                       6
     ?<Constant {0}>                           11
     ?<Constant "EP AfSendAddrInfo() f...">    28
     ?<Constant "inMsg->clusterID = 0x%x\n">   25
     ?<Constant "End_Device_Bind_rsp ok\n">    24
     ?<Constant "End_Device_Bind_rsp f...">    28
     ?<Constant "Match_Desc_rsp\n">            16

 
 1 287 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     3 bytes in segment SFR_AN
    15 bytes in segment XDATA_I
    15 bytes in segment XDATA_ID
   431 bytes in segment XDATA_ROM_C
    77 bytes in segment XDATA_Z
 
 1 350 bytes of CODE  memory
   431 bytes of CONST memory
     0 bytes of DATA  memory (+ 3 bytes shared)
    92 bytes of XDATA memory

Errors: none
Warnings: none
